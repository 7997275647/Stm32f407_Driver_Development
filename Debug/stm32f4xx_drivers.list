
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000bc4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000d4c  08000d4c  00010d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000d5c  08000d5c  00010d64  2**0
                  CONTENTS
  4 .ARM          00000000  08000d5c  08000d5c  00010d64  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d5c  08000d64  00010d64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d5c  08000d5c  00010d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d60  08000d60  00010d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010d64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010d64  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010d64  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00010d94  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000119c  00000000  00000000  00010dd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000049f  00000000  00000000  00011f73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000130  00000000  00000000  00012418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000000d8  00000000  00000000  00012548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000220a  00000000  00000000  00012620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001822  00000000  00000000  0001482a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000090f7  00000000  00000000  0001604c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000420  00000000  00000000  0001f144  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  0001f564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000d34 	.word	0x08000d34

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000d34 	.word	0x08000d34

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <GPIO_ClockControl>:
 *
 * @return : none
 *
 * @Note:
 **********************************************************************************************************/
void GPIO_ClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi) {
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
 80001e0:	460b      	mov	r3, r1
 80001e2:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE) {
 80001e4:	78fb      	ldrb	r3, [r7, #3]
 80001e6:	2b01      	cmp	r3, #1
 80001e8:	d162      	bne.n	80002b0 <GPIO_ClockControl+0xd8>
		if (pGPIOx == GPIOA) {
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	4a64      	ldr	r2, [pc, #400]	; (8000380 <GPIO_ClockControl+0x1a8>)
 80001ee:	4293      	cmp	r3, r2
 80001f0:	d106      	bne.n	8000200 <GPIO_ClockControl+0x28>
			GPIOA_CLK_EN();
 80001f2:	4b64      	ldr	r3, [pc, #400]	; (8000384 <GPIO_ClockControl+0x1ac>)
 80001f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001f6:	4a63      	ldr	r2, [pc, #396]	; (8000384 <GPIO_ClockControl+0x1ac>)
 80001f8:	f043 0301 	orr.w	r3, r3, #1
 80001fc:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOI_CLK_DI();
		}

	}

}
 80001fe:	e0b9      	b.n	8000374 <GPIO_ClockControl+0x19c>
		} else if (pGPIOx == GPIOB) {
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	4a61      	ldr	r2, [pc, #388]	; (8000388 <GPIO_ClockControl+0x1b0>)
 8000204:	4293      	cmp	r3, r2
 8000206:	d106      	bne.n	8000216 <GPIO_ClockControl+0x3e>
			GPIOB_CLK_EN();
 8000208:	4b5e      	ldr	r3, [pc, #376]	; (8000384 <GPIO_ClockControl+0x1ac>)
 800020a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800020c:	4a5d      	ldr	r2, [pc, #372]	; (8000384 <GPIO_ClockControl+0x1ac>)
 800020e:	f043 0302 	orr.w	r3, r3, #2
 8000212:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000214:	e0ae      	b.n	8000374 <GPIO_ClockControl+0x19c>
		} else if (pGPIOx == GPIOC) {
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	4a5c      	ldr	r2, [pc, #368]	; (800038c <GPIO_ClockControl+0x1b4>)
 800021a:	4293      	cmp	r3, r2
 800021c:	d106      	bne.n	800022c <GPIO_ClockControl+0x54>
			GPIOC_CLK_EN();
 800021e:	4b59      	ldr	r3, [pc, #356]	; (8000384 <GPIO_ClockControl+0x1ac>)
 8000220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000222:	4a58      	ldr	r2, [pc, #352]	; (8000384 <GPIO_ClockControl+0x1ac>)
 8000224:	f043 0304 	orr.w	r3, r3, #4
 8000228:	6313      	str	r3, [r2, #48]	; 0x30
}
 800022a:	e0a3      	b.n	8000374 <GPIO_ClockControl+0x19c>
		} else if (pGPIOx == GPIOD) {
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	4a58      	ldr	r2, [pc, #352]	; (8000390 <GPIO_ClockControl+0x1b8>)
 8000230:	4293      	cmp	r3, r2
 8000232:	d106      	bne.n	8000242 <GPIO_ClockControl+0x6a>
			GPIOD_CLK_EN();
 8000234:	4b53      	ldr	r3, [pc, #332]	; (8000384 <GPIO_ClockControl+0x1ac>)
 8000236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000238:	4a52      	ldr	r2, [pc, #328]	; (8000384 <GPIO_ClockControl+0x1ac>)
 800023a:	f043 0308 	orr.w	r3, r3, #8
 800023e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000240:	e098      	b.n	8000374 <GPIO_ClockControl+0x19c>
		} else if (pGPIOx == GPIOE) {
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	4a53      	ldr	r2, [pc, #332]	; (8000394 <GPIO_ClockControl+0x1bc>)
 8000246:	4293      	cmp	r3, r2
 8000248:	d106      	bne.n	8000258 <GPIO_ClockControl+0x80>
			GPIOE_CLK_EN();
 800024a:	4b4e      	ldr	r3, [pc, #312]	; (8000384 <GPIO_ClockControl+0x1ac>)
 800024c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800024e:	4a4d      	ldr	r2, [pc, #308]	; (8000384 <GPIO_ClockControl+0x1ac>)
 8000250:	f043 0310 	orr.w	r3, r3, #16
 8000254:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000256:	e08d      	b.n	8000374 <GPIO_ClockControl+0x19c>
		} else if (pGPIOx == GPIOF) {
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	4a4f      	ldr	r2, [pc, #316]	; (8000398 <GPIO_ClockControl+0x1c0>)
 800025c:	4293      	cmp	r3, r2
 800025e:	d106      	bne.n	800026e <GPIO_ClockControl+0x96>
			GPIOF_CLK_EN();
 8000260:	4b48      	ldr	r3, [pc, #288]	; (8000384 <GPIO_ClockControl+0x1ac>)
 8000262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000264:	4a47      	ldr	r2, [pc, #284]	; (8000384 <GPIO_ClockControl+0x1ac>)
 8000266:	f043 0320 	orr.w	r3, r3, #32
 800026a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800026c:	e082      	b.n	8000374 <GPIO_ClockControl+0x19c>
		} else if (pGPIOx == GPIOG) {
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	4a4a      	ldr	r2, [pc, #296]	; (800039c <GPIO_ClockControl+0x1c4>)
 8000272:	4293      	cmp	r3, r2
 8000274:	d106      	bne.n	8000284 <GPIO_ClockControl+0xac>
			GPIOG_CLK_EN();
 8000276:	4b43      	ldr	r3, [pc, #268]	; (8000384 <GPIO_ClockControl+0x1ac>)
 8000278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800027a:	4a42      	ldr	r2, [pc, #264]	; (8000384 <GPIO_ClockControl+0x1ac>)
 800027c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000280:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000282:	e077      	b.n	8000374 <GPIO_ClockControl+0x19c>
		} else if (pGPIOx == GPIOH) {
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	4a46      	ldr	r2, [pc, #280]	; (80003a0 <GPIO_ClockControl+0x1c8>)
 8000288:	4293      	cmp	r3, r2
 800028a:	d106      	bne.n	800029a <GPIO_ClockControl+0xc2>
			GPIOH_CLK_EN();
 800028c:	4b3d      	ldr	r3, [pc, #244]	; (8000384 <GPIO_ClockControl+0x1ac>)
 800028e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000290:	4a3c      	ldr	r2, [pc, #240]	; (8000384 <GPIO_ClockControl+0x1ac>)
 8000292:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000296:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000298:	e06c      	b.n	8000374 <GPIO_ClockControl+0x19c>
		} else if (pGPIOx == GPIOI) {
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	4a41      	ldr	r2, [pc, #260]	; (80003a4 <GPIO_ClockControl+0x1cc>)
 800029e:	4293      	cmp	r3, r2
 80002a0:	d168      	bne.n	8000374 <GPIO_ClockControl+0x19c>
			GPIOI_CLK_EN();
 80002a2:	4b38      	ldr	r3, [pc, #224]	; (8000384 <GPIO_ClockControl+0x1ac>)
 80002a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a6:	4a37      	ldr	r2, [pc, #220]	; (8000384 <GPIO_ClockControl+0x1ac>)
 80002a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002ac:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002ae:	e061      	b.n	8000374 <GPIO_ClockControl+0x19c>
		if (pGPIOx == GPIOA) {
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	4a33      	ldr	r2, [pc, #204]	; (8000380 <GPIO_ClockControl+0x1a8>)
 80002b4:	4293      	cmp	r3, r2
 80002b6:	d106      	bne.n	80002c6 <GPIO_ClockControl+0xee>
			GPIOA_CLK_DI();
 80002b8:	4b32      	ldr	r3, [pc, #200]	; (8000384 <GPIO_ClockControl+0x1ac>)
 80002ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002bc:	4a31      	ldr	r2, [pc, #196]	; (8000384 <GPIO_ClockControl+0x1ac>)
 80002be:	f023 0301 	bic.w	r3, r3, #1
 80002c2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002c4:	e056      	b.n	8000374 <GPIO_ClockControl+0x19c>
		} else if (pGPIOx == GPIOB) {
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	4a2f      	ldr	r2, [pc, #188]	; (8000388 <GPIO_ClockControl+0x1b0>)
 80002ca:	4293      	cmp	r3, r2
 80002cc:	d106      	bne.n	80002dc <GPIO_ClockControl+0x104>
			GPIOB_CLK_DI();
 80002ce:	4b2d      	ldr	r3, [pc, #180]	; (8000384 <GPIO_ClockControl+0x1ac>)
 80002d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002d2:	4a2c      	ldr	r2, [pc, #176]	; (8000384 <GPIO_ClockControl+0x1ac>)
 80002d4:	f023 0302 	bic.w	r3, r3, #2
 80002d8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002da:	e04b      	b.n	8000374 <GPIO_ClockControl+0x19c>
		} else if (pGPIOx == GPIOC) {
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	4a2b      	ldr	r2, [pc, #172]	; (800038c <GPIO_ClockControl+0x1b4>)
 80002e0:	4293      	cmp	r3, r2
 80002e2:	d106      	bne.n	80002f2 <GPIO_ClockControl+0x11a>
			GPIOC_CLK_DI();
 80002e4:	4b27      	ldr	r3, [pc, #156]	; (8000384 <GPIO_ClockControl+0x1ac>)
 80002e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e8:	4a26      	ldr	r2, [pc, #152]	; (8000384 <GPIO_ClockControl+0x1ac>)
 80002ea:	f023 0304 	bic.w	r3, r3, #4
 80002ee:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002f0:	e040      	b.n	8000374 <GPIO_ClockControl+0x19c>
		} else if (pGPIOx == GPIOD) {
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	4a26      	ldr	r2, [pc, #152]	; (8000390 <GPIO_ClockControl+0x1b8>)
 80002f6:	4293      	cmp	r3, r2
 80002f8:	d106      	bne.n	8000308 <GPIO_ClockControl+0x130>
			GPIOD_CLK_DI();
 80002fa:	4b22      	ldr	r3, [pc, #136]	; (8000384 <GPIO_ClockControl+0x1ac>)
 80002fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002fe:	4a21      	ldr	r2, [pc, #132]	; (8000384 <GPIO_ClockControl+0x1ac>)
 8000300:	f023 0308 	bic.w	r3, r3, #8
 8000304:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000306:	e035      	b.n	8000374 <GPIO_ClockControl+0x19c>
		} else if (pGPIOx == GPIOE) {
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	4a22      	ldr	r2, [pc, #136]	; (8000394 <GPIO_ClockControl+0x1bc>)
 800030c:	4293      	cmp	r3, r2
 800030e:	d106      	bne.n	800031e <GPIO_ClockControl+0x146>
			GPIOE_CLK_DI();
 8000310:	4b1c      	ldr	r3, [pc, #112]	; (8000384 <GPIO_ClockControl+0x1ac>)
 8000312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000314:	4a1b      	ldr	r2, [pc, #108]	; (8000384 <GPIO_ClockControl+0x1ac>)
 8000316:	f023 0310 	bic.w	r3, r3, #16
 800031a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800031c:	e02a      	b.n	8000374 <GPIO_ClockControl+0x19c>
		} else if (pGPIOx == GPIOF) {
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	4a1d      	ldr	r2, [pc, #116]	; (8000398 <GPIO_ClockControl+0x1c0>)
 8000322:	4293      	cmp	r3, r2
 8000324:	d106      	bne.n	8000334 <GPIO_ClockControl+0x15c>
			GPIOF_CLK_DI();
 8000326:	4b17      	ldr	r3, [pc, #92]	; (8000384 <GPIO_ClockControl+0x1ac>)
 8000328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800032a:	4a16      	ldr	r2, [pc, #88]	; (8000384 <GPIO_ClockControl+0x1ac>)
 800032c:	f023 0320 	bic.w	r3, r3, #32
 8000330:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000332:	e01f      	b.n	8000374 <GPIO_ClockControl+0x19c>
		} else if (pGPIOx == GPIOG) {
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	4a19      	ldr	r2, [pc, #100]	; (800039c <GPIO_ClockControl+0x1c4>)
 8000338:	4293      	cmp	r3, r2
 800033a:	d106      	bne.n	800034a <GPIO_ClockControl+0x172>
			GPIOG_CLK_DI();
 800033c:	4b11      	ldr	r3, [pc, #68]	; (8000384 <GPIO_ClockControl+0x1ac>)
 800033e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000340:	4a10      	ldr	r2, [pc, #64]	; (8000384 <GPIO_ClockControl+0x1ac>)
 8000342:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000346:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000348:	e014      	b.n	8000374 <GPIO_ClockControl+0x19c>
		} else if (pGPIOx == GPIOH) {
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	4a14      	ldr	r2, [pc, #80]	; (80003a0 <GPIO_ClockControl+0x1c8>)
 800034e:	4293      	cmp	r3, r2
 8000350:	d106      	bne.n	8000360 <GPIO_ClockControl+0x188>
			GPIOH_CLK_DI();
 8000352:	4b0c      	ldr	r3, [pc, #48]	; (8000384 <GPIO_ClockControl+0x1ac>)
 8000354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000356:	4a0b      	ldr	r2, [pc, #44]	; (8000384 <GPIO_ClockControl+0x1ac>)
 8000358:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800035c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800035e:	e009      	b.n	8000374 <GPIO_ClockControl+0x19c>
		} else if (pGPIOx == GPIOI) {
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	4a10      	ldr	r2, [pc, #64]	; (80003a4 <GPIO_ClockControl+0x1cc>)
 8000364:	4293      	cmp	r3, r2
 8000366:	d105      	bne.n	8000374 <GPIO_ClockControl+0x19c>
			GPIOI_CLK_DI();
 8000368:	4b06      	ldr	r3, [pc, #24]	; (8000384 <GPIO_ClockControl+0x1ac>)
 800036a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800036c:	4a05      	ldr	r2, [pc, #20]	; (8000384 <GPIO_ClockControl+0x1ac>)
 800036e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000372:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000374:	bf00      	nop
 8000376:	370c      	adds	r7, #12
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr
 8000380:	40020000 	.word	0x40020000
 8000384:	40023800 	.word	0x40023800
 8000388:	40020400 	.word	0x40020400
 800038c:	40020800 	.word	0x40020800
 8000390:	40020c00 	.word	0x40020c00
 8000394:	40021000 	.word	0x40021000
 8000398:	40021400 	.word	0x40021400
 800039c:	40021800 	.word	0x40021800
 80003a0:	40021c00 	.word	0x40021c00
 80003a4:	40022000 	.word	0x40022000

080003a8 <GPIO_Init>:
 *
 * @return :
 *
 * @Note:
 **********************************************************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b084      	sub	sp, #16
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
	GPIO_ClockControl(pGPIOHandle->pGPIOx , ENABLE);
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	2101      	movs	r1, #1
 80003b6:	4618      	mov	r0, r3
 80003b8:	f7ff ff0e 	bl	80001d8 <GPIO_ClockControl>
	uint32_t temp = 0;
 80003bc:	2300      	movs	r3, #0
 80003be:	60fb      	str	r3, [r7, #12]


	// configure mode
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	795b      	ldrb	r3, [r3, #5]
 80003c4:	2b03      	cmp	r3, #3
 80003c6:	d820      	bhi.n	800040a <GPIO_Init+0x62>
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	795b      	ldrb	r3, [r3, #5]
 80003cc:	461a      	mov	r2, r3
				<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	791b      	ldrb	r3, [r3, #4]
 80003d2:	005b      	lsls	r3, r3, #1
 80003d4:	fa02 f303 	lsl.w	r3, r2, r3
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 80003d8:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->MODER &= ~(3<<(2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));  // clearing the bit positions
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	681a      	ldr	r2, [r3, #0]
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	791b      	ldrb	r3, [r3, #4]
 80003e4:	005b      	lsls	r3, r3, #1
 80003e6:	2103      	movs	r1, #3
 80003e8:	fa01 f303 	lsl.w	r3, r1, r3
 80003ec:	43db      	mvns	r3, r3
 80003ee:	4619      	mov	r1, r3
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	400a      	ands	r2, r1
 80003f6:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER = pGPIOHandle->pGPIOx->MODER | temp;  //setting bit positions according to the pin mode
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	6819      	ldr	r1, [r3, #0]
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	68fa      	ldr	r2, [r7, #12]
 8000404:	430a      	orrs	r2, r1
 8000406:	601a      	str	r2, [r3, #0]
 8000408:	e14b      	b.n	80006a2 <GPIO_Init+0x2fa>

	} else {
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	795b      	ldrb	r3, [r3, #5]
 800040e:	2b04      	cmp	r3, #4
 8000410:	d117      	bne.n	8000442 <GPIO_Init+0x9a>
			//1. Configure FTSR
			EXTI->FTSR |= (1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);    //SET FTSR FOR GIVEN PIN
 8000412:	4b88      	ldr	r3, [pc, #544]	; (8000634 <GPIO_Init+0x28c>)
 8000414:	68db      	ldr	r3, [r3, #12]
 8000416:	687a      	ldr	r2, [r7, #4]
 8000418:	7912      	ldrb	r2, [r2, #4]
 800041a:	4611      	mov	r1, r2
 800041c:	2201      	movs	r2, #1
 800041e:	408a      	lsls	r2, r1
 8000420:	4611      	mov	r1, r2
 8000422:	4a84      	ldr	r2, [pc, #528]	; (8000634 <GPIO_Init+0x28c>)
 8000424:	430b      	orrs	r3, r1
 8000426:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);   // CLEAR RTSR
 8000428:	4b82      	ldr	r3, [pc, #520]	; (8000634 <GPIO_Init+0x28c>)
 800042a:	689b      	ldr	r3, [r3, #8]
 800042c:	687a      	ldr	r2, [r7, #4]
 800042e:	7912      	ldrb	r2, [r2, #4]
 8000430:	4611      	mov	r1, r2
 8000432:	2201      	movs	r2, #1
 8000434:	408a      	lsls	r2, r1
 8000436:	43d2      	mvns	r2, r2
 8000438:	4611      	mov	r1, r2
 800043a:	4a7e      	ldr	r2, [pc, #504]	; (8000634 <GPIO_Init+0x28c>)
 800043c:	400b      	ands	r3, r1
 800043e:	6093      	str	r3, [r2, #8]
 8000440:	e035      	b.n	80004ae <GPIO_Init+0x106>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	795b      	ldrb	r3, [r3, #5]
 8000446:	2b05      	cmp	r3, #5
 8000448:	d117      	bne.n	800047a <GPIO_Init+0xd2>
			//1. Configure RTSR
			EXTI->RTSR |= (1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);    //SET RTSR
 800044a:	4b7a      	ldr	r3, [pc, #488]	; (8000634 <GPIO_Init+0x28c>)
 800044c:	689b      	ldr	r3, [r3, #8]
 800044e:	687a      	ldr	r2, [r7, #4]
 8000450:	7912      	ldrb	r2, [r2, #4]
 8000452:	4611      	mov	r1, r2
 8000454:	2201      	movs	r2, #1
 8000456:	408a      	lsls	r2, r1
 8000458:	4611      	mov	r1, r2
 800045a:	4a76      	ldr	r2, [pc, #472]	; (8000634 <GPIO_Init+0x28c>)
 800045c:	430b      	orrs	r3, r1
 800045e:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);    // CLEAR FTSR
 8000460:	4b74      	ldr	r3, [pc, #464]	; (8000634 <GPIO_Init+0x28c>)
 8000462:	68db      	ldr	r3, [r3, #12]
 8000464:	687a      	ldr	r2, [r7, #4]
 8000466:	7912      	ldrb	r2, [r2, #4]
 8000468:	4611      	mov	r1, r2
 800046a:	2201      	movs	r2, #1
 800046c:	408a      	lsls	r2, r1
 800046e:	43d2      	mvns	r2, r2
 8000470:	4611      	mov	r1, r2
 8000472:	4a70      	ldr	r2, [pc, #448]	; (8000634 <GPIO_Init+0x28c>)
 8000474:	400b      	ands	r3, r1
 8000476:	60d3      	str	r3, [r2, #12]
 8000478:	e019      	b.n	80004ae <GPIO_Init+0x106>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	795b      	ldrb	r3, [r3, #5]
 800047e:	2b05      	cmp	r3, #5
 8000480:	d115      	bne.n	80004ae <GPIO_Init+0x106>
			//1. Configure RTSR and FTSR
			EXTI->FTSR |= (1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);  // SET BOTH RTSR AND FTSR
 8000482:	4b6c      	ldr	r3, [pc, #432]	; (8000634 <GPIO_Init+0x28c>)
 8000484:	68db      	ldr	r3, [r3, #12]
 8000486:	687a      	ldr	r2, [r7, #4]
 8000488:	7912      	ldrb	r2, [r2, #4]
 800048a:	4611      	mov	r1, r2
 800048c:	2201      	movs	r2, #1
 800048e:	408a      	lsls	r2, r1
 8000490:	4611      	mov	r1, r2
 8000492:	4a68      	ldr	r2, [pc, #416]	; (8000634 <GPIO_Init+0x28c>)
 8000494:	430b      	orrs	r3, r1
 8000496:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000498:	4b66      	ldr	r3, [pc, #408]	; (8000634 <GPIO_Init+0x28c>)
 800049a:	689b      	ldr	r3, [r3, #8]
 800049c:	687a      	ldr	r2, [r7, #4]
 800049e:	7912      	ldrb	r2, [r2, #4]
 80004a0:	4611      	mov	r1, r2
 80004a2:	2201      	movs	r2, #1
 80004a4:	408a      	lsls	r2, r1
 80004a6:	4611      	mov	r1, r2
 80004a8:	4a62      	ldr	r2, [pc, #392]	; (8000634 <GPIO_Init+0x28c>)
 80004aa:	430b      	orrs	r3, r1
 80004ac:	6093      	str	r3, [r2, #8]
		}

		// 2. Configure the gpio port selection using SYSCFG_EXTICR
		uint8_t temp1,temp2 =0;
 80004ae:	2300      	movs	r3, #0
 80004b0:	72fb      	strb	r3, [r7, #11]
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4;
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	791b      	ldrb	r3, [r3, #4]
 80004b6:	089b      	lsrs	r3, r3, #2
 80004b8:	72bb      	strb	r3, [r7, #10]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%4;
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	791b      	ldrb	r3, [r3, #4]
 80004be:	f003 0303 	and.w	r3, r3, #3
 80004c2:	72fb      	strb	r3, [r7, #11]
		SYSCFG_CLK_EN();
 80004c4:	4b5c      	ldr	r3, [pc, #368]	; (8000638 <GPIO_Init+0x290>)
 80004c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004c8:	4a5b      	ldr	r2, [pc, #364]	; (8000638 <GPIO_Init+0x290>)
 80004ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004ce:	6453      	str	r3, [r2, #68]	; 0x44
		if (pGPIOHandle->pGPIOx == GPIOA) {
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a59      	ldr	r2, [pc, #356]	; (800063c <GPIO_Init+0x294>)
 80004d6:	4293      	cmp	r3, r2
 80004d8:	d10a      	bne.n	80004f0 <GPIO_Init+0x148>
			SYSCFG->EXTICR[temp1] |= (0x00<<(temp2*4));
 80004da:	4859      	ldr	r0, [pc, #356]	; (8000640 <GPIO_Init+0x298>)
 80004dc:	7aba      	ldrb	r2, [r7, #10]
 80004de:	4958      	ldr	r1, [pc, #352]	; (8000640 <GPIO_Init+0x298>)
 80004e0:	7abb      	ldrb	r3, [r7, #10]
 80004e2:	3202      	adds	r2, #2
 80004e4:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80004e8:	3302      	adds	r3, #2
 80004ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80004ee:	e0cd      	b.n	800068c <GPIO_Init+0x2e4>
		} else if (pGPIOHandle->pGPIOx == GPIOB) {
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a53      	ldr	r2, [pc, #332]	; (8000644 <GPIO_Init+0x29c>)
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d111      	bne.n	800051e <GPIO_Init+0x176>
			SYSCFG->EXTICR[temp1] |= (0x01<<(temp2*4));
 80004fa:	4a51      	ldr	r2, [pc, #324]	; (8000640 <GPIO_Init+0x298>)
 80004fc:	7abb      	ldrb	r3, [r7, #10]
 80004fe:	3302      	adds	r3, #2
 8000500:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000504:	7afb      	ldrb	r3, [r7, #11]
 8000506:	009b      	lsls	r3, r3, #2
 8000508:	2101      	movs	r1, #1
 800050a:	fa01 f303 	lsl.w	r3, r1, r3
 800050e:	4618      	mov	r0, r3
 8000510:	494b      	ldr	r1, [pc, #300]	; (8000640 <GPIO_Init+0x298>)
 8000512:	7abb      	ldrb	r3, [r7, #10]
 8000514:	4302      	orrs	r2, r0
 8000516:	3302      	adds	r3, #2
 8000518:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800051c:	e0b6      	b.n	800068c <GPIO_Init+0x2e4>
		} else if (pGPIOHandle->pGPIOx == GPIOC) {
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4a49      	ldr	r2, [pc, #292]	; (8000648 <GPIO_Init+0x2a0>)
 8000524:	4293      	cmp	r3, r2
 8000526:	d111      	bne.n	800054c <GPIO_Init+0x1a4>
			SYSCFG->EXTICR[temp1] |= (0x02<<(temp2*4));
 8000528:	4a45      	ldr	r2, [pc, #276]	; (8000640 <GPIO_Init+0x298>)
 800052a:	7abb      	ldrb	r3, [r7, #10]
 800052c:	3302      	adds	r3, #2
 800052e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000532:	7afb      	ldrb	r3, [r7, #11]
 8000534:	009b      	lsls	r3, r3, #2
 8000536:	2102      	movs	r1, #2
 8000538:	fa01 f303 	lsl.w	r3, r1, r3
 800053c:	4618      	mov	r0, r3
 800053e:	4940      	ldr	r1, [pc, #256]	; (8000640 <GPIO_Init+0x298>)
 8000540:	7abb      	ldrb	r3, [r7, #10]
 8000542:	4302      	orrs	r2, r0
 8000544:	3302      	adds	r3, #2
 8000546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800054a:	e09f      	b.n	800068c <GPIO_Init+0x2e4>
		} else if (pGPIOHandle->pGPIOx == GPIOD) {
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a3e      	ldr	r2, [pc, #248]	; (800064c <GPIO_Init+0x2a4>)
 8000552:	4293      	cmp	r3, r2
 8000554:	d111      	bne.n	800057a <GPIO_Init+0x1d2>
			SYSCFG->EXTICR[temp1] |= (0x03<<(temp2*4));
 8000556:	4a3a      	ldr	r2, [pc, #232]	; (8000640 <GPIO_Init+0x298>)
 8000558:	7abb      	ldrb	r3, [r7, #10]
 800055a:	3302      	adds	r3, #2
 800055c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000560:	7afb      	ldrb	r3, [r7, #11]
 8000562:	009b      	lsls	r3, r3, #2
 8000564:	2103      	movs	r1, #3
 8000566:	fa01 f303 	lsl.w	r3, r1, r3
 800056a:	4618      	mov	r0, r3
 800056c:	4934      	ldr	r1, [pc, #208]	; (8000640 <GPIO_Init+0x298>)
 800056e:	7abb      	ldrb	r3, [r7, #10]
 8000570:	4302      	orrs	r2, r0
 8000572:	3302      	adds	r3, #2
 8000574:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000578:	e088      	b.n	800068c <GPIO_Init+0x2e4>
		} else if (pGPIOHandle->pGPIOx == GPIOE) {
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4a34      	ldr	r2, [pc, #208]	; (8000650 <GPIO_Init+0x2a8>)
 8000580:	4293      	cmp	r3, r2
 8000582:	d111      	bne.n	80005a8 <GPIO_Init+0x200>
			SYSCFG->EXTICR[temp1] |= (0x04<<(temp2*4));
 8000584:	4a2e      	ldr	r2, [pc, #184]	; (8000640 <GPIO_Init+0x298>)
 8000586:	7abb      	ldrb	r3, [r7, #10]
 8000588:	3302      	adds	r3, #2
 800058a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800058e:	7afb      	ldrb	r3, [r7, #11]
 8000590:	009b      	lsls	r3, r3, #2
 8000592:	2104      	movs	r1, #4
 8000594:	fa01 f303 	lsl.w	r3, r1, r3
 8000598:	4618      	mov	r0, r3
 800059a:	4929      	ldr	r1, [pc, #164]	; (8000640 <GPIO_Init+0x298>)
 800059c:	7abb      	ldrb	r3, [r7, #10]
 800059e:	4302      	orrs	r2, r0
 80005a0:	3302      	adds	r3, #2
 80005a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80005a6:	e071      	b.n	800068c <GPIO_Init+0x2e4>
		} else if (pGPIOHandle->pGPIOx == GPIOF) {
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a29      	ldr	r2, [pc, #164]	; (8000654 <GPIO_Init+0x2ac>)
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d111      	bne.n	80005d6 <GPIO_Init+0x22e>
			SYSCFG->EXTICR[temp1] |= (0x05<<(temp2*4));
 80005b2:	4a23      	ldr	r2, [pc, #140]	; (8000640 <GPIO_Init+0x298>)
 80005b4:	7abb      	ldrb	r3, [r7, #10]
 80005b6:	3302      	adds	r3, #2
 80005b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005bc:	7afb      	ldrb	r3, [r7, #11]
 80005be:	009b      	lsls	r3, r3, #2
 80005c0:	2105      	movs	r1, #5
 80005c2:	fa01 f303 	lsl.w	r3, r1, r3
 80005c6:	4618      	mov	r0, r3
 80005c8:	491d      	ldr	r1, [pc, #116]	; (8000640 <GPIO_Init+0x298>)
 80005ca:	7abb      	ldrb	r3, [r7, #10]
 80005cc:	4302      	orrs	r2, r0
 80005ce:	3302      	adds	r3, #2
 80005d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80005d4:	e05a      	b.n	800068c <GPIO_Init+0x2e4>
		} else if (pGPIOHandle->pGPIOx == GPIOG) {
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a1f      	ldr	r2, [pc, #124]	; (8000658 <GPIO_Init+0x2b0>)
 80005dc:	4293      	cmp	r3, r2
 80005de:	d111      	bne.n	8000604 <GPIO_Init+0x25c>
			SYSCFG->EXTICR[temp1] |= (0x06<<(temp2*4));
 80005e0:	4a17      	ldr	r2, [pc, #92]	; (8000640 <GPIO_Init+0x298>)
 80005e2:	7abb      	ldrb	r3, [r7, #10]
 80005e4:	3302      	adds	r3, #2
 80005e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005ea:	7afb      	ldrb	r3, [r7, #11]
 80005ec:	009b      	lsls	r3, r3, #2
 80005ee:	2106      	movs	r1, #6
 80005f0:	fa01 f303 	lsl.w	r3, r1, r3
 80005f4:	4618      	mov	r0, r3
 80005f6:	4912      	ldr	r1, [pc, #72]	; (8000640 <GPIO_Init+0x298>)
 80005f8:	7abb      	ldrb	r3, [r7, #10]
 80005fa:	4302      	orrs	r2, r0
 80005fc:	3302      	adds	r3, #2
 80005fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000602:	e043      	b.n	800068c <GPIO_Init+0x2e4>
		} else if (pGPIOHandle->pGPIOx == GPIOH) {
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a14      	ldr	r2, [pc, #80]	; (800065c <GPIO_Init+0x2b4>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d128      	bne.n	8000660 <GPIO_Init+0x2b8>
			SYSCFG->EXTICR[temp1] |= (0x07<<(temp2*4));
 800060e:	4a0c      	ldr	r2, [pc, #48]	; (8000640 <GPIO_Init+0x298>)
 8000610:	7abb      	ldrb	r3, [r7, #10]
 8000612:	3302      	adds	r3, #2
 8000614:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000618:	7afb      	ldrb	r3, [r7, #11]
 800061a:	009b      	lsls	r3, r3, #2
 800061c:	2107      	movs	r1, #7
 800061e:	fa01 f303 	lsl.w	r3, r1, r3
 8000622:	4618      	mov	r0, r3
 8000624:	4906      	ldr	r1, [pc, #24]	; (8000640 <GPIO_Init+0x298>)
 8000626:	7abb      	ldrb	r3, [r7, #10]
 8000628:	4302      	orrs	r2, r0
 800062a:	3302      	adds	r3, #2
 800062c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000630:	e02c      	b.n	800068c <GPIO_Init+0x2e4>
 8000632:	bf00      	nop
 8000634:	40013c00 	.word	0x40013c00
 8000638:	40023800 	.word	0x40023800
 800063c:	40020000 	.word	0x40020000
 8000640:	40013800 	.word	0x40013800
 8000644:	40020400 	.word	0x40020400
 8000648:	40020800 	.word	0x40020800
 800064c:	40020c00 	.word	0x40020c00
 8000650:	40021000 	.word	0x40021000
 8000654:	40021400 	.word	0x40021400
 8000658:	40021800 	.word	0x40021800
 800065c:	40021c00 	.word	0x40021c00
		} else if (pGPIOHandle->pGPIOx == GPIOI) {
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a60      	ldr	r2, [pc, #384]	; (80007e8 <GPIO_Init+0x440>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d110      	bne.n	800068c <GPIO_Init+0x2e4>
			SYSCFG->EXTICR[temp1] |= (0x08<<(temp2*4));
 800066a:	4a60      	ldr	r2, [pc, #384]	; (80007ec <GPIO_Init+0x444>)
 800066c:	7abb      	ldrb	r3, [r7, #10]
 800066e:	3302      	adds	r3, #2
 8000670:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000674:	7afb      	ldrb	r3, [r7, #11]
 8000676:	009b      	lsls	r3, r3, #2
 8000678:	2108      	movs	r1, #8
 800067a:	fa01 f303 	lsl.w	r3, r1, r3
 800067e:	4618      	mov	r0, r3
 8000680:	495a      	ldr	r1, [pc, #360]	; (80007ec <GPIO_Init+0x444>)
 8000682:	7abb      	ldrb	r3, [r7, #10]
 8000684:	4302      	orrs	r2, r0
 8000686:	3302      	adds	r3, #2
 8000688:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}

		// 3. enable interrupt delivery using IMR
		EXTI->IMR |= (1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800068c:	4b58      	ldr	r3, [pc, #352]	; (80007f0 <GPIO_Init+0x448>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	687a      	ldr	r2, [r7, #4]
 8000692:	7912      	ldrb	r2, [r2, #4]
 8000694:	4611      	mov	r1, r2
 8000696:	2201      	movs	r2, #1
 8000698:	408a      	lsls	r2, r1
 800069a:	4611      	mov	r1, r2
 800069c:	4a54      	ldr	r2, [pc, #336]	; (80007f0 <GPIO_Init+0x448>)
 800069e:	430b      	orrs	r3, r1
 80006a0:	6013      	str	r3, [r2, #0]

	}

	//configure speed
	temp = 0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	60fb      	str	r3, [r7, #12]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	799b      	ldrb	r3, [r3, #6]
 80006aa:	461a      	mov	r2, r3
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	791b      	ldrb	r3, [r3, #4]
 80006b0:	005b      	lsls	r3, r3, #1
 80006b2:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed
 80006b6:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(3<<(2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));  // clearing the bit positions
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	689a      	ldr	r2, [r3, #8]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	791b      	ldrb	r3, [r3, #4]
 80006c2:	005b      	lsls	r3, r3, #1
 80006c4:	2103      	movs	r1, #3
 80006c6:	fa01 f303 	lsl.w	r3, r1, r3
 80006ca:	43db      	mvns	r3, r3
 80006cc:	4619      	mov	r1, r3
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	400a      	ands	r2, r1
 80006d4:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR = pGPIOHandle->pGPIOx->OSPEEDR | temp;                     //setting bit positions according to the pin speed
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	6899      	ldr	r1, [r3, #8]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	68fa      	ldr	r2, [r7, #12]
 80006e2:	430a      	orrs	r2, r1
 80006e4:	609a      	str	r2, [r3, #8]
	temp = 0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	60fb      	str	r3, [r7, #12]

	//configure pupd

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	79db      	ldrb	r3, [r3, #7]
 80006ee:	461a      	mov	r2, r3
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	791b      	ldrb	r3, [r3, #4]
 80006f4:	005b      	lsls	r3, r3, #1
 80006f6:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl
 80006fa:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->PUPDR &= ~(3<<(2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));  // clearing the bit positions
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	68da      	ldr	r2, [r3, #12]
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	791b      	ldrb	r3, [r3, #4]
 8000706:	005b      	lsls	r3, r3, #1
 8000708:	2103      	movs	r1, #3
 800070a:	fa01 f303 	lsl.w	r3, r1, r3
 800070e:	43db      	mvns	r3, r3
 8000710:	4619      	mov	r1, r3
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	400a      	ands	r2, r1
 8000718:	60da      	str	r2, [r3, #12]

	pGPIOHandle->pGPIOx->PUPDR = pGPIOHandle->pGPIOx->PUPDR | temp;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	68d9      	ldr	r1, [r3, #12]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	68fa      	ldr	r2, [r7, #12]
 8000726:	430a      	orrs	r2, r1
 8000728:	60da      	str	r2, [r3, #12]

	//configure otype
	temp = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	60fb      	str	r3, [r7, #12]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOType
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	7a1b      	ldrb	r3, [r3, #8]
 8000732:	461a      	mov	r2, r3
			<< (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	791b      	ldrb	r3, [r3, #4]
 8000738:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOType
 800073c:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OTYPER &= ~(1<<(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));  // clearing the bit positions
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	685a      	ldr	r2, [r3, #4]
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	791b      	ldrb	r3, [r3, #4]
 8000748:	4619      	mov	r1, r3
 800074a:	2301      	movs	r3, #1
 800074c:	408b      	lsls	r3, r1
 800074e:	43db      	mvns	r3, r3
 8000750:	4619      	mov	r1, r3
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	400a      	ands	r2, r1
 8000758:	605a      	str	r2, [r3, #4]

	pGPIOHandle->pGPIOx->OTYPER = pGPIOHandle->pGPIOx->OTYPER | temp;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	6859      	ldr	r1, [r3, #4]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	68fa      	ldr	r2, [r7, #12]
 8000766:	430a      	orrs	r2, r1
 8000768:	605a      	str	r2, [r3, #4]
	temp = 0;
 800076a:	2300      	movs	r3, #0
 800076c:	60fb      	str	r3, [r7, #12]

	//configure alt functonality
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) {
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	795b      	ldrb	r3, [r3, #5]
 8000772:	2b02      	cmp	r3, #2
 8000774:	d133      	bne.n	80007de <GPIO_Init+0x436>
		// configure alternate fun registers
		uint8_t temp1,temp2 = 0;
 8000776:	2300      	movs	r3, #0
 8000778:	727b      	strb	r3, [r7, #9]
		temp1 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8);
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	791b      	ldrb	r3, [r3, #4]
 800077e:	08db      	lsrs	r3, r3, #3
 8000780:	723b      	strb	r3, [r7, #8]
		temp2 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	791b      	ldrb	r3, [r3, #4]
 8000786:	f003 0307 	and.w	r3, r3, #7
 800078a:	727b      	strb	r3, [r7, #9]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(15<<(4* temp2));  // clearing the bit positions
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	7a3a      	ldrb	r2, [r7, #8]
 8000792:	3208      	adds	r2, #8
 8000794:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000798:	7a7b      	ldrb	r3, [r7, #9]
 800079a:	009b      	lsls	r3, r3, #2
 800079c:	220f      	movs	r2, #15
 800079e:	fa02 f303 	lsl.w	r3, r2, r3
 80007a2:	43db      	mvns	r3, r3
 80007a4:	4618      	mov	r0, r3
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	7a3a      	ldrb	r2, [r7, #8]
 80007ac:	4001      	ands	r1, r0
 80007ae:	3208      	adds	r2, #8
 80007b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		pGPIOHandle->pGPIOx->AFR[temp1] |= pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	7a3a      	ldrb	r2, [r7, #8]
 80007ba:	3208      	adds	r2, #8
 80007bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	7a5b      	ldrb	r3, [r3, #9]
 80007c4:	461a      	mov	r2, r3
 80007c6:	7a7b      	ldrb	r3, [r7, #9]
 80007c8:	009b      	lsls	r3, r3, #2
 80007ca:	fa02 f303 	lsl.w	r3, r2, r3
 80007ce:	4618      	mov	r0, r3
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	7a3a      	ldrb	r2, [r7, #8]
 80007d6:	4301      	orrs	r1, r0
 80007d8:	3208      	adds	r2, #8
 80007da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}

}
 80007de:	bf00      	nop
 80007e0:	3710      	adds	r7, #16
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40022000 	.word	0x40022000
 80007ec:	40013800 	.word	0x40013800
 80007f0:	40013c00 	.word	0x40013c00

080007f4 <GPIO_TogglePin>:
 *
 * @return :
 *
 * @Note:
 **********************************************************************************************************/
void GPIO_TogglePin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber) {
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	460b      	mov	r3, r1
 80007fe:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR = pGPIOx->ODR ^ (1 << PinNumber);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	695b      	ldr	r3, [r3, #20]
 8000804:	78fa      	ldrb	r2, [r7, #3]
 8000806:	2101      	movs	r1, #1
 8000808:	fa01 f202 	lsl.w	r2, r1, r2
 800080c:	405a      	eors	r2, r3
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	615a      	str	r2, [r3, #20]

}
 8000812:	bf00      	nop
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
	...

08000820 <GPIO_IRQHandling>:
 *
 * @return :
 *
 * @Note:
 **********************************************************************************************************/
void GPIO_IRQHandling(uint8_t PinNumber) {
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	71fb      	strb	r3, [r7, #7]
	//clear the EXTI PR register corresponding to the pin number
	if (EXTI->PR & (1<< PinNumber)){
 800082a:	4b0c      	ldr	r3, [pc, #48]	; (800085c <GPIO_IRQHandling+0x3c>)
 800082c:	695b      	ldr	r3, [r3, #20]
 800082e:	79fa      	ldrb	r2, [r7, #7]
 8000830:	2101      	movs	r1, #1
 8000832:	fa01 f202 	lsl.w	r2, r1, r2
 8000836:	4013      	ands	r3, r2
 8000838:	2b00      	cmp	r3, #0
 800083a:	d009      	beq.n	8000850 <GPIO_IRQHandling+0x30>
		// clear
		EXTI->PR |= ( 1 << PinNumber); // The procedure to clear PR is to set it HIGH
 800083c:	4b07      	ldr	r3, [pc, #28]	; (800085c <GPIO_IRQHandling+0x3c>)
 800083e:	695b      	ldr	r3, [r3, #20]
 8000840:	79fa      	ldrb	r2, [r7, #7]
 8000842:	2101      	movs	r1, #1
 8000844:	fa01 f202 	lsl.w	r2, r1, r2
 8000848:	4611      	mov	r1, r2
 800084a:	4a04      	ldr	r2, [pc, #16]	; (800085c <GPIO_IRQHandling+0x3c>)
 800084c:	430b      	orrs	r3, r1
 800084e:	6153      	str	r3, [r2, #20]
	}

}
 8000850:	bf00      	nop
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr
 800085c:	40013c00 	.word	0x40013c00

08000860 <SPI_ClockControl>:
#include "stm32f407xx_spi_driver.h"

/*
 * peripheral clock setup
 */
void SPI_ClockControl(SPI_RegDef_t *pSPIx , uint8_t EnorDi){
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
 8000868:	460b      	mov	r3, r1
 800086a:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE) {
 800086c:	78fb      	ldrb	r3, [r7, #3]
 800086e:	2b01      	cmp	r3, #1
 8000870:	d12b      	bne.n	80008ca <SPI_ClockControl+0x6a>
		if (pSPIx == SPI1) {
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	4a2d      	ldr	r2, [pc, #180]	; (800092c <SPI_ClockControl+0xcc>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d106      	bne.n	8000888 <SPI_ClockControl+0x28>
			SPI1_CLK_EN();
 800087a:	4b2d      	ldr	r3, [pc, #180]	; (8000930 <SPI_ClockControl+0xd0>)
 800087c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087e:	4a2c      	ldr	r2, [pc, #176]	; (8000930 <SPI_ClockControl+0xd0>)
 8000880:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000884:	6453      	str	r3, [r2, #68]	; 0x44
		}

	}


}
 8000886:	e04b      	b.n	8000920 <SPI_ClockControl+0xc0>
		} else if (pSPIx == SPI2) {
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	4a2a      	ldr	r2, [pc, #168]	; (8000934 <SPI_ClockControl+0xd4>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d106      	bne.n	800089e <SPI_ClockControl+0x3e>
			SPI2_CLK_EN();
 8000890:	4b27      	ldr	r3, [pc, #156]	; (8000930 <SPI_ClockControl+0xd0>)
 8000892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000894:	4a26      	ldr	r2, [pc, #152]	; (8000930 <SPI_ClockControl+0xd0>)
 8000896:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800089a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800089c:	e040      	b.n	8000920 <SPI_ClockControl+0xc0>
		} else if (pSPIx == SPI3) {
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4a25      	ldr	r2, [pc, #148]	; (8000938 <SPI_ClockControl+0xd8>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d106      	bne.n	80008b4 <SPI_ClockControl+0x54>
			SPI3_CLK_EN();
 80008a6:	4b22      	ldr	r3, [pc, #136]	; (8000930 <SPI_ClockControl+0xd0>)
 80008a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008aa:	4a21      	ldr	r2, [pc, #132]	; (8000930 <SPI_ClockControl+0xd0>)
 80008ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008b0:	6413      	str	r3, [r2, #64]	; 0x40
}
 80008b2:	e035      	b.n	8000920 <SPI_ClockControl+0xc0>
		} else if (pSPIx == SPI4) {
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4a21      	ldr	r2, [pc, #132]	; (800093c <SPI_ClockControl+0xdc>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d131      	bne.n	8000920 <SPI_ClockControl+0xc0>
			SPI4_CLK_EN();
 80008bc:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <SPI_ClockControl+0xd0>)
 80008be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c0:	4a1b      	ldr	r2, [pc, #108]	; (8000930 <SPI_ClockControl+0xd0>)
 80008c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008c6:	6453      	str	r3, [r2, #68]	; 0x44
}
 80008c8:	e02a      	b.n	8000920 <SPI_ClockControl+0xc0>
		if (pSPIx == SPI1) {
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	4a17      	ldr	r2, [pc, #92]	; (800092c <SPI_ClockControl+0xcc>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d106      	bne.n	80008e0 <SPI_ClockControl+0x80>
			SPI1_CLK_DI();
 80008d2:	4b17      	ldr	r3, [pc, #92]	; (8000930 <SPI_ClockControl+0xd0>)
 80008d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d6:	4a16      	ldr	r2, [pc, #88]	; (8000930 <SPI_ClockControl+0xd0>)
 80008d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80008dc:	6453      	str	r3, [r2, #68]	; 0x44
}
 80008de:	e01f      	b.n	8000920 <SPI_ClockControl+0xc0>
		} else if (pSPIx == SPI2) {
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	4a14      	ldr	r2, [pc, #80]	; (8000934 <SPI_ClockControl+0xd4>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d106      	bne.n	80008f6 <SPI_ClockControl+0x96>
			SPI2_CLK_DI();
 80008e8:	4b11      	ldr	r3, [pc, #68]	; (8000930 <SPI_ClockControl+0xd0>)
 80008ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ec:	4a10      	ldr	r2, [pc, #64]	; (8000930 <SPI_ClockControl+0xd0>)
 80008ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80008f2:	6413      	str	r3, [r2, #64]	; 0x40
}
 80008f4:	e014      	b.n	8000920 <SPI_ClockControl+0xc0>
		} else if (pSPIx == SPI3) {
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4a0f      	ldr	r2, [pc, #60]	; (8000938 <SPI_ClockControl+0xd8>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d106      	bne.n	800090c <SPI_ClockControl+0xac>
			SPI3_CLK_DI();
 80008fe:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <SPI_ClockControl+0xd0>)
 8000900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000902:	4a0b      	ldr	r2, [pc, #44]	; (8000930 <SPI_ClockControl+0xd0>)
 8000904:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000908:	6413      	str	r3, [r2, #64]	; 0x40
}
 800090a:	e009      	b.n	8000920 <SPI_ClockControl+0xc0>
		} else if (pSPIx == SPI4) {
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	4a0b      	ldr	r2, [pc, #44]	; (800093c <SPI_ClockControl+0xdc>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d105      	bne.n	8000920 <SPI_ClockControl+0xc0>
			SPI4_CLK_DI();
 8000914:	4b06      	ldr	r3, [pc, #24]	; (8000930 <SPI_ClockControl+0xd0>)
 8000916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000918:	4a05      	ldr	r2, [pc, #20]	; (8000930 <SPI_ClockControl+0xd0>)
 800091a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800091e:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000920:	bf00      	nop
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr
 800092c:	40013000 	.word	0x40013000
 8000930:	40023800 	.word	0x40023800
 8000934:	40003800 	.word	0x40003800
 8000938:	40003c00 	.word	0x40003c00
 800093c:	40013400 	.word	0x40013400

08000940 <SPI_Init>:
/*
 * Init and de-init
 */
void SPI_Init(SPI_Handle_t *pSPIHandle){
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]

	SPI_ClockControl(pSPIHandle->pSPIx , ENABLE);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2101      	movs	r1, #1
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff ff86 	bl	8000860 <SPI_ClockControl>
	uint32_t tempreg =0;
 8000954:	2300      	movs	r3, #0
 8000956:	60fb      	str	r3, [r7, #12]
	//configure the device mode
	tempreg |= (pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	791b      	ldrb	r3, [r3, #4]
 800095c:	009b      	lsls	r3, r3, #2
 800095e:	461a      	mov	r2, r3
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	4313      	orrs	r3, r2
 8000964:	60fb      	str	r3, [r7, #12]


	//configure bus config
	if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD){
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	795b      	ldrb	r3, [r3, #5]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d104      	bne.n	8000978 <SPI_Init+0x38>
		//BIDI mode should be cleared
		tempreg &= ~(1<< SPI_CR1_BIDIMODE);
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	e01b      	b.n	80009b0 <SPI_Init+0x70>
	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD){
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	795b      	ldrb	r3, [r3, #5]
 800097c:	2b01      	cmp	r3, #1
 800097e:	d104      	bne.n	800098a <SPI_Init+0x4a>
		//BIDI mode should be set
		tempreg |= (1<< SPI_CR1_BIDIMODE);
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	e012      	b.n	80009b0 <SPI_Init+0x70>
	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RX){
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	795b      	ldrb	r3, [r3, #5]
 800098e:	2b02      	cmp	r3, #2
 8000990:	d10e      	bne.n	80009b0 <SPI_Init+0x70>
		//BIDI mode should be cleared
		tempreg &= ~(1<< SPI_CR1_BIDIMODE);
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000998:	60fb      	str	r3, [r7, #12]
		//RX only should be set
		tempreg |= (1<< SPI_CR1_RXONLY);
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009a0:	60fb      	str	r3, [r7, #12]

	//configure sclk speed
	tempreg |= (pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	799b      	ldrb	r3, [r3, #6]
 80009a6:	00db      	lsls	r3, r3, #3
 80009a8:	461a      	mov	r2, r3
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	4313      	orrs	r3, r2
 80009ae:	60fb      	str	r3, [r7, #12]

	}

    //configure Data Frame Format

	tempreg |= (pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	79db      	ldrb	r3, [r3, #7]
 80009b4:	02db      	lsls	r3, r3, #11
 80009b6:	461a      	mov	r2, r3
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	4313      	orrs	r3, r2
 80009bc:	60fb      	str	r3, [r7, #12]

	//configure CPOL
	tempreg |= (pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	7a1b      	ldrb	r3, [r3, #8]
 80009c2:	005b      	lsls	r3, r3, #1
 80009c4:	461a      	mov	r2, r3
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	4313      	orrs	r3, r2
 80009ca:	60fb      	str	r3, [r7, #12]

	//configure CPHA
	tempreg |= (pSPIHandle->SPIConfig.SPI_CPHASE << SPI_CR1_CPHA);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	7a5b      	ldrb	r3, [r3, #9]
 80009d0:	461a      	mov	r2, r3
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	4313      	orrs	r3, r2
 80009d6:	60fb      	str	r3, [r7, #12]


	//store tempreg into SPI|_CR1
	pSPIHandle->pSPIx->CR1 = tempreg;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	68fa      	ldr	r2, [r7, #12]
 80009de:	601a      	str	r2, [r3, #0]


}
 80009e0:	bf00      	nop
 80009e2:	3710      	adds	r7, #16
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <SPI_Control>:



void SPI_Control(SPI_Handle_t *pSPIHandle, uint8_t EnorDi) {
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	460b      	mov	r3, r1
 80009f2:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE) {
 80009f4:	78fb      	ldrb	r3, [r7, #3]
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d108      	bne.n	8000a0c <SPI_Control+0x24>
		pSPIHandle->pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000a08:	601a      	str	r2, [r3, #0]
	}
	else{
		pSPIHandle->pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 8000a0a:	e007      	b.n	8000a1c <SPI_Control+0x34>
		pSPIHandle->pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000a1a:	601a      	str	r2, [r3, #0]
}
 8000a1c:	bf00      	nop
 8000a1e:	370c      	adds	r7, #12
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <SPI_SendData>:
 *
 * @return :
 *
 * @Note: This is a blocking call
 **********************************************************************************************************/
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len){
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	60f8      	str	r0, [r7, #12]
 8000a30:	60b9      	str	r1, [r7, #8]
 8000a32:	607a      	str	r2, [r7, #4]
	while(Len > 0){
 8000a34:	e02a      	b.n	8000a8c <SPI_SendData+0x64>
		//Follow state diagram of SPI send data
	while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG)== FLAG_RESET);
 8000a36:	bf00      	nop
 8000a38:	2102      	movs	r1, #2
 8000a3a:	68f8      	ldr	r0, [r7, #12]
 8000a3c:	f000 f82e 	bl	8000a9c <SPI_GetFlagStatus>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d0f8      	beq.n	8000a38 <SPI_SendData+0x10>
	    //Check DFF BIT FIELD
	if ((pSPIx->CR1 & (1 << SPI_CR1_DFF))) {
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d00b      	beq.n	8000a6a <SPI_SendData+0x42>
		//16 bit Frame format
		//load 16 bit to SPI_DR
		pSPIx->DR = *(uint16_t *)pTxBuffer;
 8000a52:	68bb      	ldr	r3, [r7, #8]
 8000a54:	881b      	ldrh	r3, [r3, #0]
 8000a56:	461a      	mov	r2, r3
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	60da      	str	r2, [r3, #12]
		Len -= 2;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	3b02      	subs	r3, #2
 8000a60:	607b      	str	r3, [r7, #4]
		(uint16_t *)pTxBuffer++;
 8000a62:	68bb      	ldr	r3, [r7, #8]
 8000a64:	3301      	adds	r3, #1
 8000a66:	60bb      	str	r3, [r7, #8]
 8000a68:	e010      	b.n	8000a8c <SPI_SendData+0x64>
	} else if ((!(pSPIx->CR1 & (1 << SPI_CR1_DFF)))) {
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d10a      	bne.n	8000a8c <SPI_SendData+0x64>
		//8 bit Frame format
		//load 8 bit to SPI_DR
		pSPIx->DR = *pTxBuffer;
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	60da      	str	r2, [r3, #12]
		Len --;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	3b01      	subs	r3, #1
 8000a84:	607b      	str	r3, [r7, #4]
		pTxBuffer++;
 8000a86:	68bb      	ldr	r3, [r7, #8]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	60bb      	str	r3, [r7, #8]
	while(Len > 0){
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d1d1      	bne.n	8000a36 <SPI_SendData+0xe>
	}
	}

}
 8000a92:	bf00      	nop
 8000a94:	bf00      	nop
 8000a96:	3710      	adds	r7, #16
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <SPI_GetFlagStatus>:
}
void SPI_IRQHandling(SPI_Handle_t *pSPIHandle){

}

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName){
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	6039      	str	r1, [r7, #0]
	if (pSPIx->SR & FlagName){
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	689a      	ldr	r2, [r3, #8]
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	4013      	ands	r3, r2
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <SPI_GetFlagStatus+0x1a>
		return FLAG_SET;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	e000      	b.n	8000ab8 <SPI_GetFlagStatus+0x1c>
	}else{
		return FLAG_RESET;
 8000ab6:	2300      	movs	r3, #0
	}
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <delay>:
#include "stm32f407xx_gpio_driver.h"




void delay(){
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
	for (uint32_t i = 0; i<500000/2; i++){
 8000aca:	2300      	movs	r3, #0
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	e002      	b.n	8000ad6 <delay+0x12>
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	607b      	str	r3, [r7, #4]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4a04      	ldr	r2, [pc, #16]	; (8000aec <delay+0x28>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d9f8      	bls.n	8000ad0 <delay+0xc>

	}
}
 8000ade:	bf00      	nop
 8000ae0:	bf00      	nop
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr
 8000aec:	0003d08f 	.word	0x0003d08f

08000af0 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(){
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
	delay();
 8000af4:	f7ff ffe6 	bl	8000ac4 <delay>
	GPIO_IRQHandling(GPIO_PIN_NO_0);
 8000af8:	2000      	movs	r0, #0
 8000afa:	f7ff fe91 	bl	8000820 <GPIO_IRQHandling>
	GPIO_TogglePin(GPIOD,GPIO_PIN_NO_12);
 8000afe:	210c      	movs	r1, #12
 8000b00:	4802      	ldr	r0, [pc, #8]	; (8000b0c <EXTI0_IRQHandler+0x1c>)
 8000b02:	f7ff fe77 	bl	80007f4 <GPIO_TogglePin>
}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40020c00 	.word	0x40020c00

08000b10 <main>:
//PB14 MISO
//PB12 NSS
//ALTFN MODE 5

int main(void)
{
 8000b10:	b590      	push	{r4, r7, lr}
 8000b12:	b095      	sub	sp, #84	; 0x54
 8000b14:	af00      	add	r7, sp, #0

	GPIO_Handle_t SPI_MOSI;
	memset(&SPI_MOSI, 0 , sizeof(SPI_MOSI));
 8000b16:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000b1a:	220c      	movs	r2, #12
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f000 f8db 	bl	8000cda <memset>
	SPI_MOSI.pGPIOx = GPIOB;
 8000b24:	4b55      	ldr	r3, [pc, #340]	; (8000c7c <main+0x16c>)
 8000b26:	647b      	str	r3, [r7, #68]	; 0x44
	SPI_MOSI.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 8000b28:	230f      	movs	r3, #15
 8000b2a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	SPI_MOSI.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	SPI_MOSI.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000b34:	2305      	movs	r3, #5
 8000b36:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	SPI_MOSI.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OP_HIGH_SPEED;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	SPI_MOSI.GPIO_PinConfig.GPIO_PinOType = GPIO_OP_TYPE_PP;
 8000b40:	2300      	movs	r3, #0
 8000b42:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	SPI_MOSI.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000b46:	2300      	movs	r3, #0
 8000b48:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

	GPIO_Handle_t SPI_SCLK;
	memset(&SPI_SCLK, 0 , sizeof(SPI_SCLK));
 8000b4c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b50:	220c      	movs	r2, #12
 8000b52:	2100      	movs	r1, #0
 8000b54:	4618      	mov	r0, r3
 8000b56:	f000 f8c0 	bl	8000cda <memset>
	SPI_SCLK.pGPIOx = GPIOB;
 8000b5a:	4b48      	ldr	r3, [pc, #288]	; (8000c7c <main+0x16c>)
 8000b5c:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_SCLK.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000b5e:	230d      	movs	r3, #13
 8000b60:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	SPI_SCLK.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000b64:	2302      	movs	r3, #2
 8000b66:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	SPI_SCLK.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000b6a:	2305      	movs	r3, #5
 8000b6c:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	SPI_SCLK.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OP_HIGH_SPEED;
 8000b70:	2302      	movs	r3, #2
 8000b72:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	SPI_SCLK.GPIO_PinConfig.GPIO_PinOType = GPIO_OP_TYPE_PP;
 8000b76:	2300      	movs	r3, #0
 8000b78:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	SPI_SCLK.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f


	GPIO_Handle_t SPI_MISO;
	memset(&SPI_MISO, 0 , sizeof(SPI_MISO));
 8000b82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b86:	220c      	movs	r2, #12
 8000b88:	2100      	movs	r1, #0
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f000 f8a5 	bl	8000cda <memset>
	SPI_MISO.pGPIOx = GPIOB;
 8000b90:	4b3a      	ldr	r3, [pc, #232]	; (8000c7c <main+0x16c>)
 8000b92:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_MISO.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 8000b94:	230e      	movs	r3, #14
 8000b96:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	SPI_MISO.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	SPI_MISO.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000ba0:	2305      	movs	r3, #5
 8000ba2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	SPI_MISO.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OP_HIGH_SPEED;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	SPI_MISO.GPIO_PinConfig.GPIO_PinOType = GPIO_OP_TYPE_PP;
 8000bac:	2300      	movs	r3, #0
 8000bae:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	SPI_MISO.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	GPIO_Handle_t SPI_NSS;
	memset(&SPI_NSS, 0 , sizeof(SPI_NSS));
 8000bb8:	f107 0320 	add.w	r3, r7, #32
 8000bbc:	220c      	movs	r2, #12
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f000 f88a 	bl	8000cda <memset>
	SPI_NSS.pGPIOx = GPIOB;
 8000bc6:	4b2d      	ldr	r3, [pc, #180]	; (8000c7c <main+0x16c>)
 8000bc8:	623b      	str	r3, [r7, #32]
	SPI_NSS.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000bca:	230c      	movs	r3, #12
 8000bcc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	SPI_NSS.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	SPI_NSS.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000bd6:	2305      	movs	r3, #5
 8000bd8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	SPI_NSS.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OP_HIGH_SPEED;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	SPI_NSS.GPIO_PinConfig.GPIO_PinOType = GPIO_OP_TYPE_PP;
 8000be2:	2300      	movs	r3, #0
 8000be4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	SPI_NSS.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000be8:	2300      	movs	r3, #0
 8000bea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27


	GPIO_Init(&SPI_NSS);
 8000bee:	f107 0320 	add.w	r3, r7, #32
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff fbd8 	bl	80003a8 <GPIO_Init>
	GPIO_Init(&SPI_MISO);
 8000bf8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff fbd3 	bl	80003a8 <GPIO_Init>
	GPIO_Init(&SPI_MOSI);
 8000c02:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff fbce 	bl	80003a8 <GPIO_Init>
	GPIO_Init(&SPI_SCLK);
 8000c0c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fbc9 	bl	80003a8 <GPIO_Init>




	SPI_Handle_t SPI2Handler;
	SPI2Handler.pSPIx = SPI2;
 8000c16:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <main+0x170>)
 8000c18:	617b      	str	r3, [r7, #20]
	SPI2Handler.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	767b      	strb	r3, [r7, #25]
	SPI2Handler.SPIConfig.SPI_DeviceMode = SPI_MODE_MASTER;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	763b      	strb	r3, [r7, #24]
	SPI2Handler.SPIConfig.SPI_SSM = SPI_SSM_EN;
 8000c22:	2301      	movs	r3, #1
 8000c24:	77bb      	strb	r3, [r7, #30]
	SPI2Handler.SPIConfig.SPI_DFF = SPI_DFF8;
 8000c26:	2300      	movs	r3, #0
 8000c28:	76fb      	strb	r3, [r7, #27]
	SPI2Handler.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV2;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	76bb      	strb	r3, [r7, #26]
	SPI2Handler.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	773b      	strb	r3, [r7, #28]
	SPI2Handler.SPIConfig.SPI_CPHASE = SPI_CPHASE_LOW;
 8000c32:	2300      	movs	r3, #0
 8000c34:	777b      	strb	r3, [r7, #29]
	SPI2Handler.SPIConfig.SPI_SSI = SPI_SSI_EN;
 8000c36:	2301      	movs	r3, #1
 8000c38:	77fb      	strb	r3, [r7, #31]

	SPI_Init(&SPI2Handler);
 8000c3a:	f107 0314 	add.w	r3, r7, #20
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff fe7e 	bl	8000940 <SPI_Init>

	// SPI is by default disabled so ENABLE it
	SPI_Control(&SPI2Handler,ENABLE);
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	2101      	movs	r1, #1
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff fecc 	bl	80009e8 <SPI_Control>

	char data[] = "Hello world!";
 8000c50:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <main+0x174>)
 8000c52:	1d3c      	adds	r4, r7, #4
 8000c54:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c56:	c407      	stmia	r4!, {r0, r1, r2}
 8000c58:	7023      	strb	r3, [r4, #0]
    SPI_SendData(SPI2, (uint8_t *)data, strlen(data));
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff fab3 	bl	80001c8 <strlen>
 8000c62:	4602      	mov	r2, r0
 8000c64:	1d3b      	adds	r3, r7, #4
 8000c66:	4619      	mov	r1, r3
 8000c68:	4805      	ldr	r0, [pc, #20]	; (8000c80 <main+0x170>)
 8000c6a:	f7ff fedd 	bl	8000a28 <SPI_SendData>

    SPI_Control(&SPI2Handler,DISABLE);
 8000c6e:	f107 0314 	add.w	r3, r7, #20
 8000c72:	2100      	movs	r1, #0
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff feb7 	bl	80009e8 <SPI_Control>


    /* Loop forever */
	while(1){
 8000c7a:	e7fe      	b.n	8000c7a <main+0x16a>
 8000c7c:	40020400 	.word	0x40020400
 8000c80:	40003800 	.word	0x40003800
 8000c84:	08000d4c 	.word	0x08000d4c

08000c88 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c88:	480d      	ldr	r0, [pc, #52]	; (8000cc0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c8a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c8c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c90:	480c      	ldr	r0, [pc, #48]	; (8000cc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c92:	490d      	ldr	r1, [pc, #52]	; (8000cc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c94:	4a0d      	ldr	r2, [pc, #52]	; (8000ccc <LoopForever+0xe>)
  movs r3, #0
 8000c96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c98:	e002      	b.n	8000ca0 <LoopCopyDataInit>

08000c9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c9e:	3304      	adds	r3, #4

08000ca0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ca2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca4:	d3f9      	bcc.n	8000c9a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ca6:	4a0a      	ldr	r2, [pc, #40]	; (8000cd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ca8:	4c0a      	ldr	r4, [pc, #40]	; (8000cd4 <LoopForever+0x16>)
  movs r3, #0
 8000caa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cac:	e001      	b.n	8000cb2 <LoopFillZerobss>

08000cae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb0:	3204      	adds	r2, #4

08000cb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb4:	d3fb      	bcc.n	8000cae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cb6:	f000 f819 	bl	8000cec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cba:	f7ff ff29 	bl	8000b10 <main>

08000cbe <LoopForever>:

LoopForever:
  b LoopForever
 8000cbe:	e7fe      	b.n	8000cbe <LoopForever>
  ldr   r0, =_estack
 8000cc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000ccc:	08000d64 	.word	0x08000d64
  ldr r2, =_sbss
 8000cd0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000cd4:	2000001c 	.word	0x2000001c

08000cd8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cd8:	e7fe      	b.n	8000cd8 <ADC_IRQHandler>

08000cda <memset>:
 8000cda:	4402      	add	r2, r0
 8000cdc:	4603      	mov	r3, r0
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d100      	bne.n	8000ce4 <memset+0xa>
 8000ce2:	4770      	bx	lr
 8000ce4:	f803 1b01 	strb.w	r1, [r3], #1
 8000ce8:	e7f9      	b.n	8000cde <memset+0x4>
	...

08000cec <__libc_init_array>:
 8000cec:	b570      	push	{r4, r5, r6, lr}
 8000cee:	4d0d      	ldr	r5, [pc, #52]	; (8000d24 <__libc_init_array+0x38>)
 8000cf0:	4c0d      	ldr	r4, [pc, #52]	; (8000d28 <__libc_init_array+0x3c>)
 8000cf2:	1b64      	subs	r4, r4, r5
 8000cf4:	10a4      	asrs	r4, r4, #2
 8000cf6:	2600      	movs	r6, #0
 8000cf8:	42a6      	cmp	r6, r4
 8000cfa:	d109      	bne.n	8000d10 <__libc_init_array+0x24>
 8000cfc:	4d0b      	ldr	r5, [pc, #44]	; (8000d2c <__libc_init_array+0x40>)
 8000cfe:	4c0c      	ldr	r4, [pc, #48]	; (8000d30 <__libc_init_array+0x44>)
 8000d00:	f000 f818 	bl	8000d34 <_init>
 8000d04:	1b64      	subs	r4, r4, r5
 8000d06:	10a4      	asrs	r4, r4, #2
 8000d08:	2600      	movs	r6, #0
 8000d0a:	42a6      	cmp	r6, r4
 8000d0c:	d105      	bne.n	8000d1a <__libc_init_array+0x2e>
 8000d0e:	bd70      	pop	{r4, r5, r6, pc}
 8000d10:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d14:	4798      	blx	r3
 8000d16:	3601      	adds	r6, #1
 8000d18:	e7ee      	b.n	8000cf8 <__libc_init_array+0xc>
 8000d1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d1e:	4798      	blx	r3
 8000d20:	3601      	adds	r6, #1
 8000d22:	e7f2      	b.n	8000d0a <__libc_init_array+0x1e>
 8000d24:	08000d5c 	.word	0x08000d5c
 8000d28:	08000d5c 	.word	0x08000d5c
 8000d2c:	08000d5c 	.word	0x08000d5c
 8000d30:	08000d60 	.word	0x08000d60

08000d34 <_init>:
 8000d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d36:	bf00      	nop
 8000d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d3a:	bc08      	pop	{r3}
 8000d3c:	469e      	mov	lr, r3
 8000d3e:	4770      	bx	lr

08000d40 <_fini>:
 8000d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d42:	bf00      	nop
 8000d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d46:	bc08      	pop	{r3}
 8000d48:	469e      	mov	lr, r3
 8000d4a:	4770      	bx	lr
